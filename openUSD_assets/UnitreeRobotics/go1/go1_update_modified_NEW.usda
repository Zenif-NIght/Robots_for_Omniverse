#usda 1.0
(
    customLayerData = {
        dictionary audioSettings = {
            double dopplerLimit = 2
            double dopplerScale = 1
            token enableDistanceDelay = "off"
            token enableDoppler = "off"
            token enableInterauralDelay = "off"
            double nonSpatialTimeScale = 1
            double spatialTimeScale = 1
            double speedOfSound = 340
        }
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (50000.2992590964, -1.1102296695119392e-11, 0)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (1.007732565320806, 1.0077325653208078, 1.007732660609169)
                double3 target = (-3.978038742857848e-8, -3.978038565222164e-8, 7.956076930604183e-8)
            }
            dictionary Right = {
                double3 position = (0, -50000.147004002705, -1.1102262887697268e-11)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 0, 50000.07134293765)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:dynamicDiffuseGI:probeCounts" = (6, 6, 6)
            float3 "rtx:dynamicDiffuseGI:probeGridOrigin" = (-210, -250, -10)
            float3 "rtx:dynamicDiffuseGI:volumeSize" = (600, 440, 300)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:lightspeed:material:overrideAlbedo" = (0.5, 0.5, 0.5)
            float3 "rtx:lightspeed:material:overrideEmissiveColor" = (0.5, 0.5, 0.5)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "go1_description"
    metersPerUnit = 1
    upAxis = "Z"
)

def Xform "go1_description" (
    prepend apiSchemas = ["PhysicsArticulationRootAPI", "PhysxArticulationAPI"]
)
{
    bool physxArticulation:enabledSelfCollisions = 0
    int physxArticulation:solverPositionIterationCount = 32
    int physxArticulation:solverVelocityIterationCount = 16
    quatd xformOp:orient = (1, 0, 0, 0)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Scope "Looks"
    {
        def Material "material_black"
        {
            token outputs:mdl:displacement.connect = </go1_description/Looks/material_black/Shader.outputs:out>
            token outputs:mdl:surface.connect = </go1_description/Looks/material_black/Shader.outputs:out>
            token outputs:mdl:volume.connect = </go1_description/Looks/material_black/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0, 0, 0) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                token outputs:out
            }
        }

        def Material "material_blue"
        {
            token outputs:mdl:displacement.connect = </go1_description/Looks/material_blue/Shader.outputs:out>
            token outputs:mdl:surface.connect = </go1_description/Looks/material_blue/Shader.outputs:out>
            token outputs:mdl:volume.connect = </go1_description/Looks/material_blue/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0, 0, 0.8) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                token outputs:out
            }
        }

        def Material "material_brown"
        {
            token outputs:mdl:displacement.connect = </go1_description/Looks/material_brown/Shader.outputs:out>
            token outputs:mdl:surface.connect = </go1_description/Looks/material_brown/Shader.outputs:out>
            token outputs:mdl:volume.connect = </go1_description/Looks/material_brown/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.87058824, 0.8117647, 0.7647059)
                token outputs:out
            }
        }

        def Material "material_green"
        {
            token outputs:mdl:displacement.connect = </go1_description/Looks/material_green/Shader.outputs:out>
            token outputs:mdl:surface.connect = </go1_description/Looks/material_green/Shader.outputs:out>
            token outputs:mdl:volume.connect = </go1_description/Looks/material_green/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0, 0.8, 0)
                token outputs:out
            }
        }

        def Material "material_grey"
        {
            token outputs:mdl:displacement.connect = </go1_description/Looks/material_grey/Shader.outputs:out>
            token outputs:mdl:surface.connect = </go1_description/Looks/material_grey/Shader.outputs:out>
            token outputs:mdl:volume.connect = </go1_description/Looks/material_grey/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.2)
                token outputs:out
            }
        }

        def Material "material_orange"
        {
            token outputs:mdl:displacement.connect = </go1_description/Looks/material_orange/Shader.outputs:out>
            token outputs:mdl:surface.connect = </go1_description/Looks/material_orange/Shader.outputs:out>
            token outputs:mdl:volume.connect = </go1_description/Looks/material_orange/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (1, 0.42352942, 0.039215688) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                token outputs:out
            }
        }

        def Material "material_red"
        {
            token outputs:mdl:displacement.connect = </go1_description/Looks/material_red/Shader.outputs:out>
            token outputs:mdl:surface.connect = </go1_description/Looks/material_red/Shader.outputs:out>
            token outputs:mdl:volume.connect = </go1_description/Looks/material_red/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.8, 0, 0)
                token outputs:out
            }
        }

        def Material "material_silver"
        {
            token outputs:mdl:displacement.connect = </go1_description/Looks/material_silver/Shader.outputs:out>
            token outputs:mdl:surface.connect = </go1_description/Looks/material_silver/Shader.outputs:out>
            token outputs:mdl:volume.connect = </go1_description/Looks/material_silver/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.9137255, 0.9137255, 0.84705883)
                token outputs:out
            }
        }

        def Material "material_white"
        {
            token outputs:mdl:displacement.connect = </go1_description/Looks/material_white/Shader.outputs:out>
            token outputs:mdl:surface.connect = </go1_description/Looks/material_white/Shader.outputs:out>
            token outputs:mdl:volume.connect = </go1_description/Looks/material_white/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (1, 1, 1) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                token outputs:out
            }
        }

        def Material "material_DefaultMaterial"
        {
            token outputs:mdl:displacement.connect = </go1_description/Looks/material_DefaultMaterial/Shader.outputs:out>
            token outputs:mdl:surface.connect = </go1_description/Looks/material_DefaultMaterial/Shader.outputs:out>
            token outputs:mdl:volume.connect = </go1_description/Looks/material_DefaultMaterial/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:id = "UsdPreviewSurface"
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.6, 0.6, 0.6)
                token outputs:out
            }
        }

        def Material "material________002"
        {
            token outputs:mdl:displacement.connect = </go1_description/Looks/material________002/Shader.outputs:out>
            token outputs:mdl:surface.connect = </go1_description/Looks/material________002/Shader.outputs:out>
            token outputs:mdl:volume.connect = </go1_description/Looks/material________002/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:id = "UsdPreviewSurface"
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.6038163, 0.6038163, 0.6038163)
                color3f inputs:emissive_color = (0, 0, 0)
                token outputs:out
            }
        }

        def Material "material________003"
        {
            token outputs:mdl:displacement.connect = </go1_description/Looks/material________003/Shader.outputs:out>
            token outputs:mdl:surface.connect = </go1_description/Looks/material________003/Shader.outputs:out>
            token outputs:mdl:volume.connect = </go1_description/Looks/material________003/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:id = "UsdPreviewSurface"
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.6038163, 0.6038163, 0.6038163)
                color3f inputs:emissive_color = (0, 0, 0)
                token outputs:out
            }
        }

        def Material "material_______"
        {
            token outputs:mdl:displacement.connect = </go1_description/Looks/material_______/Shader.outputs:out>
            token outputs:mdl:surface.connect = </go1_description/Looks/material_______/Shader.outputs:out>
            token outputs:mdl:volume.connect = </go1_description/Looks/material_______/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:id = "UsdPreviewSurface"
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.02037898, 0.02037898, 0.02037898)
                color3f inputs:emissive_color = (0, 0, 0)
                token outputs:out
            }
        }
    }

    def Xform "base" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        float physics:mass = 0.1
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "visuals"
        {
            float3[] extent = [(-0.0005, -0.0005, -0.0005), (0.0005, 0.0005, 0.0005)]
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.0010000000474974513, 0.0010000000474974513, 0.0010000000474974513)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "floating_base"
        {
            rel physics:body0 = </go1_description/base>
            rel physics:body1 = </go1_description/trunk>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "trunk" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0.0223, 0.002, -0.0005)
        float3 physics:diagonalInertia = (0.016835218, 0.06560711, 0.07427207)
        float physics:mass = 5.204
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]


        def Cube "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.1881, -0.04675, -0.057), (0.1881, 0.04675, 0.057)]
            uniform token purpose = "guide"
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.37619999051094055, 0.09350000321865082, 0.11400000005960464)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "LF_HAA" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping
            float drive:angular:physics:maxForce = 1422
            float drive:angular:physics:stiffness
            float drive:angular:physics:targetVelocity = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "X"
            rel physics:body0 = </go1_description/trunk>
            rel physics:body1 = </go1_description/FL_hip>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.1881, 0.04675, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -60
            float physics:upperLimit = 60
            float physxJoint:jointFriction = 0.2
            float physxJoint:maxJointVelocity = 1724.603
        }

        def PhysicsRevoluteJoint "RF_HAA" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping
            float drive:angular:physics:maxForce = 1422
            float drive:angular:physics:stiffness
            float drive:angular:physics:targetVelocity = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "X"
            rel physics:body0 = </go1_description/trunk>
            rel physics:body1 = </go1_description/FR_hip>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.1881, -0.04675, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -60
            float physics:upperLimit = 60
            float physxJoint:jointFriction = 0.2
            float physxJoint:maxJointVelocity = 1724.603
        }

        def PhysicsRevoluteJoint "LH_HAA" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping
            float drive:angular:physics:maxForce = 1422
            float drive:angular:physics:stiffness
            float drive:angular:physics:targetVelocity = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "X"
            rel physics:body0 = </go1_description/trunk>
            rel physics:body1 = </go1_description/RL_hip>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.1881, 0.04675, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -60
            float physics:upperLimit = 60
            float physxJoint:jointFriction = 0.2
            float physxJoint:maxJointVelocity = 1724.603
        }

        def PhysicsRevoluteJoint "RH_HAA" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping
            float drive:angular:physics:maxForce = 1422
            float drive:angular:physics:stiffness
            float drive:angular:physics:targetVelocity = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "X"
            rel physics:body0 = </go1_description/trunk>
            rel physics:body1 = </go1_description/RR_hip>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.1881, -0.04675, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
            float physics:lowerLimit = -60
            float physics:upperLimit = 60
            float physxJoint:jointFriction = 0.2
            float physxJoint:maxJointVelocity = 1724.603
        }

        def PhysicsFixedJoint "camera_joint_chin"
        {
            rel physics:body0 = </go1_description/trunk>
            rel physics:body1 = </go1_description/camera_chin>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.2522, 0.0125, -0.0436)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (-3.090862e-8, 0.70710677, -3.090862e-8, -0.70710677)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }

        def PhysicsFixedJoint "camera_joint_face"
        {
            rel physics:body0 = </go1_description/trunk>
            rel physics:body1 = </go1_description/camera_face>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.2785, 0.0125, 0.0167)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (-4.371139e-8, 1, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }

        def PhysicsFixedJoint "camera_joint_left"
        {
            rel physics:body0 = </go1_description/trunk>
            rel physics:body1 = </go1_description/camera_left>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.066, 0.082, -0.0176)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.09229614, 0.7010574, 0.7010574, -0.0922962)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }

        def PhysicsFixedJoint "camera_joint_rearDown"
        {
            rel physics:body0 = </go1_description/trunk>
            rel physics:body1 = </go1_description/camera_rearDown>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0825, 0.0125, -0.04365)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (-3.090862e-8, 0.70710677, -3.090862e-8, -0.70710677)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }

        def PhysicsFixedJoint "camera_joint_right"
        {
            rel physics:body0 = </go1_description/trunk>
            rel physics:body1 = </go1_description/camera_right>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.041, -0.082, -0.0176)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (-0.0922962, 0.7010574, -0.7010574, -0.09229614)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }

        def PhysicsFixedJoint "imu_joint"
        {
            rel physics:body0 = </go1_description/trunk>
            rel physics:body1 = </go1_description/imu_link>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.01592, -0.06659, -0.00617)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }

        def PhysicsFixedJoint "ultraSound_joint_face"
        {
            rel physics:body0 = </go1_description/trunk>
            rel physics:body1 = </go1_description/ultraSound_face>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0.2747, 0, -0.0088)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }

        def PhysicsFixedJoint "ultraSound_joint_left"
        {
            rel physics:body0 = </go1_description/trunk>
            rel physics:body1 = </go1_description/ultraSound_left>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0535, 0.0826, 0.00868)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7010574, -0.09229617, 0.09229617, 0.7010574)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }

        def PhysicsFixedJoint "ultraSound_joint_right"
        {
            rel physics:body0 = </go1_description/trunk>
            rel physics:body1 = </go1_description/ultraSound_right>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (-0.0535, -0.0826, 0.00868)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.7010574, 0.09229617, 0.09229617, -0.7010574)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "FL_hip" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (-0.00541, -0.00074, 0.000006)
        float3 physics:diagonalInertia = (0.0003742682, 0.00063592364, 0.0004576474)
        float physics:mass = 0.591
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.18809999525547028, 0.04675000160932541, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]


        def Cylinder "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.02, -0.046, -0.046), (0.02, 0.046, 0.046)]
            double height = 0.03999999910593033
            custom bool physxCollisionCustomGeometry = 1
            uniform token purpose = "guide"
            double radius = 0.04600000008940697
            quatd xformOp:orient = (0.7071067690849304, 0.7071067690849304, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "FL_hip_fixed"
        {
            rel physics:body0 = </go1_description/FL_hip>
            rel physics:body1 = </go1_description/FL_thigh_rotor>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0.08, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }

        def PhysicsRevoluteJoint "LF_HFE" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping
            float drive:angular:physics:maxForce = 1422
            float drive:angular:physics:stiffness
            float drive:angular:physics:targetVelocity = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "X"
            rel physics:body0 = </go1_description/FL_hip>
            rel physics:body1 = </go1_description/FL_thigh>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0.08, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, 0, 0, 0.70710677)
            quatf physics:localRot1 = (0.70710677, 0, 0, 0.70710677)
            float physics:lowerLimit = -37.999996
            float physics:upperLimit = 169.99998
            float physxJoint:jointFriction = 0.2
            float physxJoint:maxJointVelocity = 1724.603
        }
    }

    def Xform "FL_thigh_rotor" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.18809999525547028, 0.12674999237060547, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.016, -0.041, -0.041), (0.016, 0.041, 0.041)]
            double height = 0.03200000151991844
            custom bool physxCollisionCustomGeometry = 1
            uniform token purpose = "guide"
            double radius = 0.04100000113248825
            quatd xformOp:orient = (0.7071067690849304, 0.7071067690849304, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "FL_thigh" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (-0.003468, -0.018947, -0.032736)
        float3 physics:diagonalInertia = (0.005851561, 0.0055961553, 0.0010715702)
        float physics:mass = 0.92
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.18809999525547028, 0.12674999237060547, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]


        def Cube "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.1065, -0.01225, -0.017), (0.1065, 0.01225, 0.017)]
            uniform token purpose = "guide"
            double size = 1
            quatd xformOp:orient = (0.7071067690849304, 0, 0.7071067690849304, 0)
            double3 xformOp:scale = (0.21299999952316284, 0.02449999935925007, 0.03400000184774399)
            double3 xformOp:translate = (0, 0, -0.10649999976158142)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "LF_KFE" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping
            float drive:angular:physics:maxForce = 1422
            float drive:angular:physics:stiffness
            float drive:angular:physics:targetVelocity = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "X"
            rel physics:body0 = </go1_description/FL_thigh>
            rel physics:body1 = </go1_description/FL_calf>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.213)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, 0, 0, 0.70710677)
            quatf physics:localRot1 = (0.70710677, 0, 0, 0.70710677)
            float physics:lowerLimit = -156
            float physics:upperLimit = -48
            float physxJoint:jointFriction = 0.2
            float physxJoint:maxJointVelocity = 1724.603
        }
    }

    def Xform "FL_calf" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0.006286, 0.001307, -0.122269)
        float3 physics:diagonalInertia = (0.0029391863, 0.0029557694, 0.000030273372)
        float physics:mass = 0.131
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.18809999525547028, 0.12674999237060547, -0.21299999952316284)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]


        def Cube "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.1065, -0.008, -0.008), (0.1065, 0.008, 0.008)]
            uniform token purpose = "guide"
            double size = 1
            quatd xformOp:orient = (0.7071067690849304, 0, 0.7071067690849304, 0)
            double3 xformOp:scale = (0.21299999952316284, 0.01600000075995922, 0.01600000075995922)
            double3 xformOp:translate = (0, 0, -0.10649999976158142)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "FL_foot_fixed"
        {
            rel physics:body0 = </go1_description/FL_calf>
            rel physics:body1 = </go1_description/FL_foot>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.213)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "FL_foot" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.0000096, 0.0000096, 0.0000096)
        float physics:mass = 0.06
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.18809999525547028, 0.12674999237060547, -0.4259999990463257)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.01, -0.01, -0.01), (0.01, 0.01, 0.01)]
            double radius = 0.009999999776482582
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.02, -0.02, -0.02), (0.02, 0.02, 0.02)]
            uniform token purpose = "guide"
            double radius = 0.019999999552965164
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "FR_hip" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (-0.00541, 0.00074, 0.000006)
        float3 physics:diagonalInertia = (0.0003742682, 0.00063592364, 0.0004576474)
        float physics:mass = 0.591
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.18809999525547028, -0.04675000160932541, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]


        def Cylinder "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.02, -0.046, -0.046), (0.02, 0.046, 0.046)]
            double height = 0.03999999910593033
            custom bool physxCollisionCustomGeometry = 1
            uniform token purpose = "guide"
            double radius = 0.04600000008940697
            quatd xformOp:orient = (0.7071067690849304, 0.7071067690849304, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "FR_hip_fixed"
        {
            rel physics:body0 = </go1_description/FR_hip>
            rel physics:body1 = </go1_description/FR_thigh_rotor>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, -0.08, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }

        def PhysicsRevoluteJoint "RF_HFE" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping
            float drive:angular:physics:maxForce = 1422
            float drive:angular:physics:stiffness
            float drive:angular:physics:targetVelocity = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "X"
            rel physics:body0 = </go1_description/FR_hip>
            rel physics:body1 = </go1_description/FR_thigh>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, -0.08, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, 0, 0, 0.70710677)
            quatf physics:localRot1 = (0.70710677, 0, 0, 0.70710677)
            float physics:lowerLimit = -37.999996
            float physics:upperLimit = 169.99998
            float physxJoint:jointFriction = 0.2
            float physxJoint:maxJointVelocity = 1724.603
        }
    }

    def Xform "FR_thigh_rotor" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.18809999525547028, -0.12674999237060547, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.016, -0.041, -0.041), (0.016, 0.041, 0.041)]
            double height = 0.03200000151991844
            custom bool physxCollisionCustomGeometry = 1
            uniform token purpose = "guide"
            double radius = 0.04100000113248825
            quatd xformOp:orient = (0.7071067690849304, 0.7071067690849304, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "FR_thigh" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (-0.003468, 0.018947, -0.032736)
        float3 physics:diagonalInertia = (0.005851561, 0.0055961553, 0.0010715702)
        float physics:mass = 0.92
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.18809999525547028, -0.12674999237060547, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]


        def Cube "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.1065, -0.01225, -0.017), (0.1065, 0.01225, 0.017)]
            uniform token purpose = "guide"
            double size = 1
            quatd xformOp:orient = (0.7071067690849304, 0, 0.7071067690849304, 0)
            double3 xformOp:scale = (0.21299999952316284, 0.02449999935925007, 0.03400000184774399)
            double3 xformOp:translate = (0, 0, -0.10649999976158142)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "RF_KFE" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping
            float drive:angular:physics:maxForce = 1422
            float drive:angular:physics:stiffness
            float drive:angular:physics:targetVelocity = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "X"
            rel physics:body0 = </go1_description/FR_thigh>
            rel physics:body1 = </go1_description/FR_calf>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.213)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, 0, 0, 0.70710677)
            quatf physics:localRot1 = (0.70710677, 0, 0, 0.70710677)
            float physics:lowerLimit = -156
            float physics:upperLimit = -48
            float physxJoint:jointFriction = 0.2
            float physxJoint:maxJointVelocity = 1724.603
        }
    }

    def Xform "FR_calf" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0.006286, 0.001307, -0.122269)
        float3 physics:diagonalInertia = (0.0029391863, 0.0029557694, 0.000030273372)
        float physics:mass = 0.131
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.18809999525547028, -0.12674999237060547, -0.21299999952316284)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]


        def Cube "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.1065, -0.008, -0.008), (0.1065, 0.008, 0.008)]
            uniform token purpose = "guide"
            double size = 1
            quatd xformOp:orient = (0.7071067690849304, 0, 0.7071067690849304, 0)
            double3 xformOp:scale = (0.21299999952316284, 0.01600000075995922, 0.01600000075995922)
            double3 xformOp:translate = (0, 0, -0.10649999976158142)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "FR_foot_fixed"
        {
            rel physics:body0 = </go1_description/FR_calf>
            rel physics:body1 = </go1_description/FR_foot>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.213)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "FR_foot" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.0000096, 0.0000096, 0.0000096)
        float physics:mass = 0.06
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.18809999525547028, -0.12674999237060547, -0.4259999990463257)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.01, -0.01, -0.01), (0.01, 0.01, 0.01)]
            double radius = 0.009999999776482582
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.02, -0.02, -0.02), (0.02, 0.02, 0.02)]
            uniform token purpose = "guide"
            double radius = 0.019999999552965164
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "RL_hip" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0.00541, -0.00074, 0.000006)
        float3 physics:diagonalInertia = (0.0003742682, 0.00063592364, 0.0004576474)
        float physics:mass = 0.591
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.18809999525547028, 0.04675000160932541, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]


        def Cylinder "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.02, -0.046, -0.046), (0.02, 0.046, 0.046)]
            double height = 0.03999999910593033
            custom bool physxCollisionCustomGeometry = 1
            uniform token purpose = "guide"
            double radius = 0.04600000008940697
            quatd xformOp:orient = (0.7071067690849304, 0.7071067690849304, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "RL_hip_fixed"
        {
            rel physics:body0 = </go1_description/RL_hip>
            rel physics:body1 = </go1_description/RL_thigh_rotor>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0.08, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }

        def PhysicsRevoluteJoint "LH_HFE" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping
            float drive:angular:physics:maxForce = 1422
            float drive:angular:physics:stiffness
            float drive:angular:physics:targetVelocity = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "X"
            rel physics:body0 = </go1_description/RL_hip>
            rel physics:body1 = </go1_description/RL_thigh>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0.08, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, 0, 0, 0.70710677)
            quatf physics:localRot1 = (0.70710677, 0, 0, 0.70710677)
            float physics:lowerLimit = -37.999996
            float physics:upperLimit = 169.99998
            float physxJoint:jointFriction = 0.2
            float physxJoint:maxJointVelocity = 1724.603
        }
    }

    def Xform "RL_thigh_rotor" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.18809999525547028, 0.12674999237060547, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.016, -0.041, -0.041), (0.016, 0.041, 0.041)]
            double height = 0.03200000151991844
            custom bool physxCollisionCustomGeometry = 1
            uniform token purpose = "guide"
            double radius = 0.04100000113248825
            quatd xformOp:orient = (0.7071067690849304, 0.7071067690849304, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "RL_thigh" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (-0.003468, -0.018947, -0.032736)
        float3 physics:diagonalInertia = (0.005851561, 0.0055961553, 0.0010715702)
        float physics:mass = 0.92
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.18809999525547028, 0.12674999237060547, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]


        def Cube "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.1065, -0.01225, -0.017), (0.1065, 0.01225, 0.017)]
            uniform token purpose = "guide"
            double size = 1
            quatd xformOp:orient = (0.7071067690849304, 0, 0.7071067690849304, 0)
            double3 xformOp:scale = (0.21299999952316284, 0.02449999935925007, 0.03400000184774399)
            double3 xformOp:translate = (0, 0, -0.10649999976158142)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "LH_KFE" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping
            float drive:angular:physics:maxForce = 1422
            float drive:angular:physics:stiffness
            float drive:angular:physics:targetVelocity = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "X"
            rel physics:body0 = </go1_description/RL_thigh>
            rel physics:body1 = </go1_description/RL_calf>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.213)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, 0, 0, 0.70710677)
            quatf physics:localRot1 = (0.70710677, 0, 0, 0.70710677)
            float physics:lowerLimit = -156
            float physics:upperLimit = -48
            float physxJoint:jointFriction = 0.2
            float physxJoint:maxJointVelocity = 1724.603
        }
    }

    def Xform "RL_calf" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0.006286, 0.001307, -0.122269)
        float3 physics:diagonalInertia = (0.0029391863, 0.0029557694, 0.000030273372)
        float physics:mass = 0.131
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.18809999525547028, 0.12674999237060547, -0.21299999952316284)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]


        def Cube "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.1065, -0.008, -0.008), (0.1065, 0.008, 0.008)]
            uniform token purpose = "guide"
            double size = 1
            quatd xformOp:orient = (0.7071067690849304, 0, 0.7071067690849304, 0)
            double3 xformOp:scale = (0.21299999952316284, 0.01600000075995922, 0.01600000075995922)
            double3 xformOp:translate = (0, 0, -0.10649999976158142)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "RL_foot_fixed"
        {
            rel physics:body0 = </go1_description/RL_calf>
            rel physics:body1 = </go1_description/RL_foot>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.213)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "RL_foot" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.0000096, 0.0000096, 0.0000096)
        float physics:mass = 0.06
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.18809999525547028, 0.12674999237060547, -0.4259999990463257)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.01, -0.01, -0.01), (0.01, 0.01, 0.01)]
            double radius = 0.009999999776482582
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.02, -0.02, -0.02), (0.02, 0.02, 0.02)]
            uniform token purpose = "guide"
            double radius = 0.019999999552965164
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "RR_hip" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0.00541, 0.00074, 0.000006)
        float3 physics:diagonalInertia = (0.0003742682, 0.00063592364, 0.0004576474)
        float physics:mass = 0.591
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.18809999525547028, -0.04675000160932541, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]


        def Cylinder "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.02, -0.046, -0.046), (0.02, 0.046, 0.046)]
            double height = 0.03999999910593033
            custom bool physxCollisionCustomGeometry = 1
            uniform token purpose = "guide"
            double radius = 0.04600000008940697
            quatd xformOp:orient = (0.7071067690849304, 0.7071067690849304, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "RR_hip_fixed"
        {
            rel physics:body0 = </go1_description/RR_hip>
            rel physics:body1 = </go1_description/RR_thigh_rotor>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, -0.08, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }

        def PhysicsRevoluteJoint "RH_HFE" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping
            float drive:angular:physics:maxForce = 1422
            float drive:angular:physics:stiffness
            float drive:angular:physics:targetVelocity = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "X"
            rel physics:body0 = </go1_description/RR_hip>
            rel physics:body1 = </go1_description/RR_thigh>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, -0.08, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, 0, 0, 0.70710677)
            quatf physics:localRot1 = (0.70710677, 0, 0, 0.70710677)
            float physics:lowerLimit = -37.999996
            float physics:upperLimit = 169.99998
            float physxJoint:jointFriction = 0.2
            float physxJoint:maxJointVelocity = 1724.603
        }
    }

    def Xform "RR_thigh_rotor" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.18809999525547028, -0.12674999237060547, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cylinder "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            uniform token axis = "Z"
            float3[] extent = [(-0.016, -0.041, -0.041), (0.016, 0.041, 0.041)]
            double height = 0.03200000151991844
            custom bool physxCollisionCustomGeometry = 1
            uniform token purpose = "guide"
            double radius = 0.04100000113248825
            quatd xformOp:orient = (0.7071067690849304, 0.7071067690849304, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "RR_thigh" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (-0.003468, 0.018947, -0.032736)
        float3 physics:diagonalInertia = (0.005851561, 0.0055961553, 0.0010715702)
        float physics:mass = 0.92
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.18809999525547028, -0.12674999237060547, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]


        def Cube "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.1065, -0.01225, -0.017), (0.1065, 0.01225, 0.017)]
            uniform token purpose = "guide"
            double size = 1
            quatd xformOp:orient = (0.7071067690849304, 0, 0.7071067690849304, 0)
            double3 xformOp:scale = (0.21299999952316284, 0.02449999935925007, 0.03400000184774399)
            double3 xformOp:translate = (0, 0, -0.10649999976158142)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsRevoluteJoint "RH_KFE" (
            prepend apiSchemas = ["PhysxJointAPI", "PhysicsDriveAPI:angular"]
        )
        {
            float drive:angular:physics:damping
            float drive:angular:physics:maxForce = 1422
            float drive:angular:physics:stiffness
            float drive:angular:physics:targetVelocity = 0
            uniform token drive:angular:physics:type = "force"
            uniform token physics:axis = "X"
            rel physics:body0 = </go1_description/RR_thigh>
            rel physics:body1 = </go1_description/RR_calf>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.213)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.70710677, 0, 0, 0.70710677)
            quatf physics:localRot1 = (0.70710677, 0, 0, 0.70710677)
            float physics:lowerLimit = -156
            float physics:upperLimit = -48
            float physxJoint:jointFriction = 0.2
            float physxJoint:maxJointVelocity = 1724.603
        }
    }

    def Xform "RR_calf" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0.006286, 0.001307, -0.122269)
        float3 physics:diagonalInertia = (0.0029391863, 0.0029557694, 0.000030273372)
        float physics:mass = 0.131
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.18809999525547028, -0.12674999237060547, -0.21299999952316284)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]


        def Cube "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.1065, -0.008, -0.008), (0.1065, 0.008, 0.008)]
            uniform token purpose = "guide"
            double size = 1
            quatd xformOp:orient = (0.7071067690849304, 0, 0.7071067690849304, 0)
            double3 xformOp:scale = (0.21299999952316284, 0.01600000075995922, 0.01600000075995922)
            double3 xformOp:translate = (0, 0, -0.10649999976158142)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "RR_foot_fixed"
        {
            rel physics:body0 = </go1_description/RR_calf>
            rel physics:body1 = </go1_description/RR_foot>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, -0.213)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (1, 0, 0, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "RR_foot" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.0000096, 0.0000096, 0.0000096)
        float physics:mass = 0.06
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.18809999525547028, -0.12674999237060547, -0.4259999990463257)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Sphere "visuals"
        {
            float3[] extent = [(-0.01, -0.01, -0.01), (0.01, 0.01, 0.01)]
            double radius = 0.009999999776482582
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Sphere "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.02, -0.02, -0.02), (0.02, 0.02, 0.02)]
            uniform token purpose = "guide"
            double radius = 0.019999999552965164
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "camera_chin" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.000001, 0.000001, 0.000001)
        float physics:mass = 0.00001
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (3.090861706040247e-8, -0.7071067811865469, 3.090862113999562e-8, 0.7071067811865469)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.25220000743865967, 0.012500000186264515, -0.04360000044107437)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]


        def Cube "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.0005, -0.0005, -0.0005), (0.0005, 0.0005, 0.0005)]
            uniform token purpose = "guide"
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.0010000000474974513, 0.0010000000474974513, 0.0010000000474974513)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "camera_optical_joint_chin"
        {
            rel physics:body0 = </go1_description/camera_chin>
            rel physics:body1 = </go1_description/camera_optical_chin>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.49999997, -0.49999997, 0.49999997, -0.49999997)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "camera_optical_chin" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        float physics:mass = 0.1
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (6.123233995736766e-17, 0.7071068109888685, 0.7071067513842252, 1.4348014869594727e-8)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.25220000743865967, 0.012500000186264515, -0.04360000044107437)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Xform "camera_face" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.000001, 0.000001, 0.000001)
        float physics:mass = 0.00001
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (-4.371138822550558e-8, 0.9999999999999992, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.2784999907016754, 0.012500000186264515, 0.016699999570846558)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]


        def Cube "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.0005, -0.0005, -0.0005), (0.0005, 0.0005, 0.0005)]
            uniform token purpose = "guide"
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.0010000000474974513, 0.0010000000474974513, 0.0010000000474974513)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "camera_optical_joint_face"
        {
            rel physics:body0 = </go1_description/camera_face>
            rel physics:body1 = </go1_description/camera_optical_face>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.49999997, -0.49999997, 0.49999997, -0.49999997)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "camera_optical_face" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        float physics:mass = 0.1
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (0.4999999217688984, 0.5000000558793516, 0.4999999664723851, 0.5000000558793516)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.2784999907016754, 0.012500000186264515, 0.016699999570846558)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Xform "camera_left" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.000001, 0.000001, 0.000001)
        float physics:mass = 0.00001
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (0.09229613152977646, 0.7010573572667609, 0.701057357266761, -0.09229619574461684)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.06599999964237213, 0.0820000022649765, -0.01759999990463257)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]


        def Cube "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.0005, -0.0005, -0.0005), (0.0005, 0.0005, 0.0005)]
            uniform token purpose = "guide"
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.0010000000474974513, 0.0010000000474974513, 0.0010000000474974513)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "camera_laserscan_joint_left"
        {
            rel physics:body0 = </go1_description/camera_left>
            rel physics:body1 = </go1_description/camera_laserscan_link_left>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.9914448, 0, 0.1305265, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }

        def PhysicsFixedJoint "camera_optical_joint_left"
        {
            rel physics:body0 = </go1_description/camera_left>
            rel physics:body1 = </go1_description/camera_optical_left>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.49999997, -0.49999997, 0.49999997, -0.49999997)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "camera_laserscan_link_left" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        float physics:mass = 0.1
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (-3.7252898926583896e-8, 0.7071067811865468, 0.707106781186547, -2.235174028919438e-8)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.06599999964237213, 0.0820000022649765, -0.01759999990463257)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Xform "camera_optical_left" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        float physics:mass = 0.1
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (-3.3527611070612636e-8, 3.3527615678184864e-8, 0.7933534847146867, 0.608761240792366)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.06599999964237213, 0.0820000022649765, -0.01759999990463257)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Xform "camera_rearDown" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.000001, 0.000001, 0.000001)
        float physics:mass = 0.00001
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (3.090861706040247e-8, -0.7071067811865469, 3.090862113999562e-8, 0.7071067811865469)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.08250000327825546, 0.012500000186264515, -0.04365000128746033)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]


        def Cube "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.0005, -0.0005, -0.0005), (0.0005, 0.0005, 0.0005)]
            uniform token purpose = "guide"
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.0010000000474974513, 0.0010000000474974513, 0.0010000000474974513)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "camera_optical_joint_rearDown"
        {
            rel physics:body0 = </go1_description/camera_rearDown>
            rel physics:body1 = </go1_description/camera_optical_rearDown>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.49999997, -0.49999997, 0.49999997, -0.49999997)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "camera_optical_rearDown" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        float physics:mass = 0.1
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (6.123233995736766e-17, 0.7071068109888685, 0.7071067513842252, 1.4348014869594727e-8)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.08250000327825546, 0.012500000186264515, -0.04365000128746033)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Xform "camera_right" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.000001, 0.000001, 0.000001)
        float physics:mass = 0.00001
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (0.0922961911344169, -0.7010573572667613, 0.7010573572667612, 0.09229613613997349)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.04100000113248825, -0.0820000022649765, -0.01759999990463257)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]


        def Cube "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.0005, -0.0005, -0.0005), (0.0005, 0.0005, 0.0005)]
            uniform token purpose = "guide"
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.0010000000474974513, 0.0010000000474974513, 0.0010000000474974513)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def PhysicsFixedJoint "camera_laserscan_joint_right"
        {
            rel physics:body0 = </go1_description/camera_right>
            rel physics:body1 = </go1_description/camera_laserscan_link_right>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.9914448, 0, 0.1305265, 0)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }

        def PhysicsFixedJoint "camera_optical_joint_right"
        {
            rel physics:body0 = </go1_description/camera_right>
            rel physics:body1 = </go1_description/camera_optical_right>
            float physics:breakForce = 3.4028235e38
            float physics:breakTorque = 3.4028235e38
            point3f physics:localPos0 = (0, 0, 0)
            point3f physics:localPos1 = (0, 0, 0)
            quatf physics:localRot0 = (0.49999997, -0.49999997, 0.49999997, -0.49999997)
            quatf physics:localRot1 = (1, 0, 0, 0)
        }
    }

    def Xform "camera_laserscan_link_right" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        float physics:mass = 0.1
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (2.2351740519736194e-8, -0.7071067811865469, 0.7071067811865469, -3.725290048199063e-8)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.04100000113248825, -0.0820000022649765, -0.01759999990463257)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Xform "camera_optical_right" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        float physics:mass = 0.1
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (0.608761218267295, 0.793353501998773, -2.9802326091298124e-8, 2.980232609129813e-8)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.04100000113248825, -0.0820000022649765, -0.01759999990463257)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }

    def Xform "imu_link" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.0001, 0.0001, 0.0001)
        float physics:mass = 0.001
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.01592000015079975, -0.06659000366926193, -0.006169999949634075)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "visuals"
        {
            float3[] extent = [(-0.0005, -0.0005, -0.0005), (0.0005, 0.0005, 0.0005)]
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.0010000000474974513, 0.0010000000474974513, 0.0010000000474974513)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def Cube "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.0005, -0.0005, -0.0005), (0.0005, 0.0005, 0.0005)]
            uniform token purpose = "guide"
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.0010000000474974513, 0.0010000000474974513, 0.0010000000474974513)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "ultraSound_face" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.000001, 0.000001, 0.000001)
        float physics:mass = 0.00001
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (1, 0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0.27469998598098755, 0, -0.008799999952316284)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]


        def Cube "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.0005, -0.0005, -0.0005), (0.0005, 0.0005, 0.0005)]
            uniform token purpose = "guide"
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.0010000000474974513, 0.0010000000474974513, 0.0010000000474974513)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "ultraSound_left" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.000001, 0.000001, 0.000001)
        float physics:mass = 0.00001
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (0.701057400194259, -0.09229616078613921, 0.09229616078613921, 0.701057315089961)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.05350000038743019, 0.08259999752044678, 0.008679999969899654)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]


        def Cube "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.0005, -0.0005, -0.0005), (0.0005, 0.0005, 0.0005)]
            uniform token purpose = "guide"
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.0010000000474974513, 0.0010000000474974513, 0.0010000000474974513)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "ultraSound_right" (
        prepend apiSchemas = ["PhysicsRigidBodyAPI", "PhysicsMassAPI"]
    )
    {
        vector3f physics:angularVelocity = (0, 0, 0)
        point3f physics:centerOfMass = (0, 0, 0)
        float3 physics:diagonalInertia = (0.000001, 0.000001, 0.000001)
        float physics:mass = 0.00001
        vector3f physics:velocity = (0, 0, 0)
        quatd xformOp:orient = (0.7010574001942591, 0.09229616078613921, 0.09229616078613921, -0.701057315089961)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-0.05350000038743019, -0.08259999752044678, 0.008679999969899654)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]


        def Cube "collisions" (
            prepend apiSchemas = ["PhysicsCollisionAPI"]
        )
        {
            float3[] extent = [(-0.0005, -0.0005, -0.0005), (0.0005, 0.0005, 0.0005)]
            uniform token purpose = "guide"
            double size = 1
            quatd xformOp:orient = (1, 0, 0, 0)
            double3 xformOp:scale = (0.0010000000474974513, 0.0010000000474974513, 0.0010000000474974513)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }
}

def Xform "GroundPlane"
{
    quatf xformOp:orient = (1, 0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, -0.5)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Mesh "CollisionMesh"
    {
        uniform bool doubleSided = 0
        int[] faceVertexCounts = [4]
        int[] faceVertexIndices = [0, 1, 2, 3]
        normal3f[] normals = [(0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1)]
        point3f[] points = [(-25, -25, 0), (25, -25, 0), (25, 25, 0), (-25, 25, 0)]
        color3f[] primvars:displayColor = [(0.5, 0.5, 0.5)]
        texCoord2f[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1)] (
            interpolation = "varying"
        )
        float3 xformOp:scale = (1, 1, 1)
        uniform token[] xformOpOrder = ["xformOp:scale"]
    }

    def Plane "CollisionPlane" (
        prepend apiSchemas = ["PhysicsCollisionAPI"]
    )
    {
        uniform token axis = "Z"
        uniform token purpose = "guide"
        float3 xformOp:scale = (1, 1, 1)
        uniform token[] xformOpOrder = ["xformOp:scale"]
    }
}

def DistantLight "DistantLight" (
    prepend apiSchemas = ["ShapingAPI"]
)
{
    float angle = 1
    float intensity = 3000
    float shaping:cone:angle = 180
    float shaping:cone:softness
    float shaping:focus
    color3f shaping:focusTint
    asset shaping:ies:file
    quatd xformOp:orient = (0.6532814824381883, 0.2705980500730985, 0.27059805007309845, 0.6532814824381882)
    double3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
}

